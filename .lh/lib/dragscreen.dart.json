{
    "sourceFile": "lib/dragscreen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1643807947299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1643807978613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+// ignore_for_file: prefer_const_constructors\r\n+\r\n import 'package:dragdemo/diffrent_drag_target.dart';\r\n import 'package:dragdemo/fruitbox.dart';\r\n import 'package:flutter/material.dart';\r\n \r\n"
                },
                {
                    "date": 1643808010801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,16 @@\n import 'package:dragdemo/diffrent_drag_target.dart';\r\n import 'package:dragdemo/fruitbox.dart';\r\n import 'package:flutter/material.dart';\r\n \r\n-class DragScreen extends StatefulWidget {\r\n-  const DragScreen({Key? key}) : super(key: key);\r\n+class DragScreenTwo extends StatefulWidget {\r\n+  const DragScreenTwo({Key? key}) : super(key: key);\r\n \r\n   @override\r\n   _DragScreenState createState() => _DragScreenState();\r\n }\r\n \r\n-class _DragScreenState extends State<DragScreen> {\r\n+class _DragScreenState extends State<DragScreenTwo> {\r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n   }\r\n"
                }
            ],
            "date": 1643807947299,
            "name": "Commit-0",
            "content": "import 'package:dragdemo/diffrent_drag_target.dart';\r\nimport 'package:dragdemo/fruitbox.dart';\r\nimport 'package:flutter/material.dart';\r\n\r\nclass DragScreen extends StatefulWidget {\r\n  const DragScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _DragScreenState createState() => _DragScreenState();\r\n}\r\n\r\nclass _DragScreenState extends State<DragScreen> {\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n  }\r\n\r\n  int score = 0;\r\n\r\n  bool isApple = false;\r\n  bool isKiwi = false;\r\n  bool isBanana = false;\r\n  bool isGrapes = false;\r\n  bool isMango = false;\r\n\r\n  String toBlankEmojiApple = '';\r\n  String toBlankEmojiKiwi = '';\r\n  String toBlankEmojiBanana = '';\r\n  String toBlankEmojiGrapes = '';\r\n  String toBlankEmojiMango = '';\r\n\r\n  String appleEmoji = 'üçé';\r\n  String kiwiEmoji = 'ü•ù';\r\n  String bananaEmoji = 'üçå';\r\n  String grapesEmoji = 'üçá';\r\n  String mangoEmoji = 'ü•≠';\r\n  String doneEmoji = '‚úì';\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        backgroundColor: Colors.green,\r\n        title: Text('Match colors'),\r\n        actions: <Widget>[\r\n          IconButton(\r\n            icon: Icon(\r\n              Icons.restore_outlined,\r\n              color: Colors.white,\r\n            ),\r\n            onPressed: () {\r\n              // Navigator.pop(context);\r\n            },\r\n          )\r\n        ],\r\n      ),\r\n      body: Center(\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(8.0),\r\n          child: Row(\r\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n            children: [\r\n              Column(\r\n                mainAxisAlignment: MainAxisAlignment.spaceAround,\r\n                children: [\r\n                  FruitBox(mangoEmoji),\r\n                  FruitBox(appleEmoji),\r\n                  FruitBox(grapesEmoji),\r\n                  FruitBox(kiwiEmoji),\r\n                  FruitBox(bananaEmoji),\r\n                ],\r\n              ),\r\n              Column(\r\n                mainAxisAlignment: MainAxisAlignment.center,\r\n                // ignore: prefer_const_literals_to_create_immutables\r\n                children: [\r\n                  Text(\r\n                    'Score : $score',\r\n                    style: TextStyle(color: Colors.green, fontSize: 20),\r\n                  ),\r\n                ],\r\n              ),\r\n              Column(\r\n                mainAxisAlignment: MainAxisAlignment.spaceAround,\r\n                // ignore: prefer_const_literals_to_create_immutables\r\n                children: [\r\n                  DiffrentDragTargets(\r\n                    dragBoxColor: Colors.green,\r\n                    currentEmojiDragBox: kiwiEmoji,\r\n                    dragBoxactiveEmoji: toBlankEmojiKiwi,\r\n                    onInsideTargetChanged: (value) {\r\n                      setState(() {\r\n                        isKiwi = value;\r\n                      });\r\n                    },\r\n                    onActiveEmojiChanged: (value) {\r\n                      setState(() {\r\n                        toBlankEmojiKiwi = value;\r\n                        kiwiEmoji = doneEmoji;\r\n                        score++;\r\n                        if (score == 5) {\r\n                          showAlertDialog(context);\r\n                        }\r\n                      });\r\n                    },\r\n                  ),\r\n                  DiffrentDragTargets(\r\n                    dragBoxColor: Colors.red,\r\n                    currentEmojiDragBox: appleEmoji,\r\n                    dragBoxactiveEmoji: toBlankEmojiApple,\r\n                    onInsideTargetChanged: (value) {\r\n                      setState(() {\r\n                        isApple = value;\r\n                      });\r\n                    },\r\n                    onActiveEmojiChanged: (value) {\r\n                      setState(() {\r\n                        toBlankEmojiApple = value;\r\n                        appleEmoji = doneEmoji;\r\n                        score++;\r\n                        if (score == 5) {\r\n                          showAlertDialog(context);\r\n                        }\r\n                      });\r\n                    },\r\n                  ),\r\n                  DiffrentDragTargets(\r\n                    dragBoxColor: Colors.yellow,\r\n                    currentEmojiDragBox: bananaEmoji,\r\n                    dragBoxactiveEmoji: toBlankEmojiBanana,\r\n                    onInsideTargetChanged: (value) {\r\n                      setState(() {\r\n                        isBanana = value;\r\n                      });\r\n                    },\r\n                    onActiveEmojiChanged: (value) {\r\n                      setState(() {\r\n                        toBlankEmojiBanana = value;\r\n                        bananaEmoji = doneEmoji;\r\n                        score++;\r\n                        if (score == 5) {\r\n                          showAlertDialog(context);\r\n                        }\r\n                      });\r\n                    },\r\n                  ),\r\n                  DiffrentDragTargets(\r\n                    dragBoxColor: Colors.purple,\r\n                    currentEmojiDragBox: grapesEmoji,\r\n                    dragBoxactiveEmoji: toBlankEmojiGrapes,\r\n                    onInsideTargetChanged: (value) {\r\n                      setState(() {\r\n                        isGrapes = value;\r\n                      });\r\n                    },\r\n                    onActiveEmojiChanged: (value) {\r\n                      setState(() {\r\n                        toBlankEmojiGrapes = value;\r\n                        grapesEmoji = doneEmoji;\r\n                        score++;\r\n                        if (score == 5) {\r\n                          showAlertDialog(context);\r\n                        }\r\n                      });\r\n                    },\r\n                  ),\r\n                  DiffrentDragTargets(\r\n                    dragBoxColor: Colors.orange,\r\n                    currentEmojiDragBox: mangoEmoji,\r\n                    dragBoxactiveEmoji: toBlankEmojiMango,\r\n                    onInsideTargetChanged: (value) {\r\n                      setState(() {\r\n                        isMango = value;\r\n                      });\r\n                    },\r\n                    onActiveEmojiChanged: (value) {\r\n                      setState(() {\r\n                        toBlankEmojiMango = value;\r\n                        mangoEmoji = doneEmoji;\r\n                        score++;\r\n                        if (score == 5) {\r\n                          showAlertDialog(context);\r\n                        }\r\n                      });\r\n                    },\r\n                  ),\r\n                ],\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  showAlertDialog(BuildContext context) {\r\n    // set up the button\r\n    Widget okButton = TextButton(\r\n      child: Text(\"OK\"),\r\n      onPressed: () {\r\n        Navigator.pop(context);\r\n        // initState();\r\n        // Navigator.push(\r\n        //   context,\r\n        //   MaterialPageRoute(builder: (context) => const DragScreen()),\r\n        // );\r\n      },\r\n    );\r\n\r\n    // set up the AlertDialog\r\n    AlertDialog alert = AlertDialog(\r\n      title: Text(\"Cleared!\", style: TextStyle(color: Colors.green)),\r\n      content: Text(\"Score 5\", style: TextStyle(color: Colors.green)),\r\n      actions: [\r\n        okButton,\r\n      ],\r\n    );\r\n\r\n    // show the dialog\r\n    showDialog(\r\n      context: context,\r\n      builder: (BuildContext context) {\r\n        return alert;\r\n      },\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}